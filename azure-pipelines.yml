# This pipeline automates the deployment process using Terraform and AWS.
# It includes the following steps:
# 1. Login to AWS using credentials stored in Azure DevOps pipeline variables.
# 2. Initialize Terraform in the working directory.
# 3. Generate a Terraform plan to show the actions Terraform will take.
#
# Trigger:
# - The pipeline is triggered by changes to the 'main' branch.
#
# Pool:
# - The pipeline runs on the latest Ubuntu virtual machine image.
#
# Steps:
# - Login to AWS: Configures the AWS CLI with credentials from pipeline variables.
# - Terraform Init: Initializes Terraform, downloading necessary provider plugins.
# - Terraform Plan: Generates an execution plan for the Terraform configuration.

trigger:
- main

pool: wsl-pool

steps:

- task: TerraformInstaller@1
  inputs:
    terraformVersion: '1.9.4'
    
- script: |
    echo "Logging into AWS..."
    aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
    aws configure set aws_secret_access_key $(AWS_SECRET_ACCESS_KEY)
    aws configure set default.region us-east-1
  displayName: 'Login to AWS'

- script: |
    cd $(System.DefaultWorkingDirectory)/_terraform-task/Terraform_space/ 

    # Remove the existing lock file 
    rm -f .terraform.lock.hcl

    echo "Initializing Terraform..."
    terraform init -reconfigure
  displayName: 'Terraform Init'

- script: |
    echo "Planning Terraform..."
    terraform import aws_s3_bucket.terraform_state terraform-up-and-running-state-qpworeitu23409588
    terraform plan -lock=false -out="out.tfplan"
  displayName: 'Terraform Plan'
  
- task: PublishPipelineArtifact@1
  displayName: 'Publish Pipeline Artifact'
  inputs:
    artifact: 'Terraform_space'
    path: 'out.tfplan'